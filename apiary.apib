FORMAT: 1A9
HOST: https://app.mergado.com/api/

# Mergado
The Mergado API is based on REST principles. The request/response format is JSON.

>**Note:** IDs are strings. Even if they seem to be numbers at the first sight,
 in fact they can be anything alphanumeric. Trust me.

## Allowed HTTPs requests:

| Method | Description                                |
|--------|--------------------------------------------|
| GET    | Retrieves a resource or list of resources. |
| POST   | Creates or updates a resource.             |
| PATCH  | Updates a resource.                        |
| DELETE | Deletes a resource.                        |

## Typical Server Responses

| Code | Status             | Description |
|------|--------------------|-------------|
| 200  | OK                 | The request was successful (some API calls may return 201 instead). |
| 201  | Created            | The request was successful and a resource was created. |
| 204  | No Content         | The request was successful but there is no representation to return (that is, the response is empty). |
| 400  | Bad Request        | The request could not be understood or was missing required parameters. |
| 401  | Unauthorized       | Authentication failed or user does not have permissions for the requested operation. |
| 403  | Forbidden          | Access denied. |
| 404  | Not Found          | Resource was not found. |
| 405  | Method Not Allowed | Requested method is not supported for the specified resource. |
| 409  | Conflict           | Resource already exists and could not be created. |

## Additional GET parameters

| Parameter                    | Example                                        | Description |
|------------------------------|------------------------------------------------|-------------|
| **fields**                   | `?fields=uri,shop.id`                          | Only fields `uri` and `id` nested in `shop` will be returned in the given example. It works also for arrays of results - filter is applied to all their items, one by one. |
| **limit**, **offset**        | `?limit=5&offset=2`                            | Works for arrays only. It is for paging the results. In the example, 2 results from the beginning are skipped and only 5 following items are returned. The default limit for every array result is 10 items. |
| **start_date**, **end_date** | `?start_date=2013-12-24&end_date=2013-12-26`   | Works for only for some special arrays. In the example, it will return results corresponding only to Christmas time period of 2013.
| **filter_by**                | `?filter_by={"validator": "heureka_is_alone"}` | Filters the result. You can also append field name with `__in`, i.e. filter results by enumerating all values of a field, for example `item_id__in` expects list of possible ITEM_IDs. |
| **order_by**                 | `?order_by=validator,-verdict`                 | Orders the result in ascending or descending order. |

## OAuth2 Scopes

| Scope                        | Description                                           |
|------------------------------|-------------------------------------------------------|
| **user.read**                | Client is authorized to access user information.      |
| **user.write**               | Client is authorized to modify a user.                |
| **user.shops.read**          | Client is authorized to access user's eshops.         |
| **user.shops.write**         | Client is authorized to modify user's eshops.         |
| **shop.read**                | Client is authorized to access eshop's information.   |
| **shop.write**               | Client is authorized to modify an eshop.              |
| **shop.projects.read**       | Client is authorized to access eshop's projects.      |
| **shop.projects.write**      | Client is authorized to modify eshop's projects.      |
| **shop.notify.read**         | Client is authorized to view sent notifications.      |
| **shop.notify.write**        | Client is authorized to send new notifications.       |
| **project.read**             | Client is authorized to access project's information. |
| **project.write**            | Client is authorized to modify a project.             |
| **project.ga.read**          | Client is authorized to access Google Analytics.      |
| **project.rules.read**       | Client is authorized to access project's rules.       |
| **project.rules.write**      | Client is authorized to modify project's rules.       |
| **project.queries.read**     | Client is authorized to access project's queries.     |
| **project.queries.write**    | Client is authorized to modify project's queries.     |
| **project.elements.read**    | Client is authorized to access project's elements.    |
| **project.elements.write**   | Client is authorized to modify project's elements.    |
| **project.variables.read**   | Client is authorized to access project's variables.   |
| **project.variables.write**  | Client is authorized to modify project's variables.   |
| **project.products.read**    | Client is authorized to access project's products.    |
| **project.products.write**   | Client is authorized to modify project's products.    |
| **project.stats.read**       | Client is authorized to access project's statistics.  |
| **project.stats.write**      | Client is authorized to modify project's statistics.  |
| **project.feedaudits.read**  | Client is authorized to access project's feedauidts.  |
| **project.feedaudits.write** | Client is authorized to create project's feedauidts.  |

## Info [/]
### Show API Version [GET]

+ Response 200

    + Headers

            Content-Type: application/json

    + Body

            {
                "version": "0.2"
            }

# Group Management
Management of users, eshops, projects and other resources.

## Users [/users/{?limit,offset,fields}]
### List Users [GET]
Lists all users the authenticated client has access to.

**OAuth2 Scope:** user.read

+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "limit": 10,
                "offset": 0,
                "data": [
                    {
                        "id": "6",
                        "first_name": "Lorem",
                        "last_name": "Ipsum",
                        "name": "Lorem Ipsum",
                        "email": "lorem.ipsum@example.com",
                        "city": "Brno",
                        "company": "Mergado",
                        "country": "cz",
                        "dic": "00000000",
                        "ico": "00000000",
                        "fakturoid_id": null,
                        "invoice_months": 1,
                        "last_access": "2016-03-21T16:32:32+00:00",
                        "locale": "cs-CZ",
                        "postcode": "61200",
                        "promotion_code": null,
                        "registered_at": "2015-11-03T16:08:17+00:00",
                        "street": "Palackého 123/456",
                        "timezone": "Europe/Prague",
                        "timezone_offset": null,
                        "send_summary": false
                    }
                ]
            }

### Authenticated User [GET /me/{?fields}]
Returns currently authenticated user.

**OAuth2 Scope:** user.read

+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "id": "6",
                "first_name": "Lorem",
                "last_name": "Ipsum",
                "name": "Lorem Ipsum",
                "email": "lorem.ipsum@example.com",
                "city": "Brno",
                "company": "Mergado",
                "country": "cz",
                "dic": "00000000",
                "ico": "00000000",
                "fakturoid_id": null,
                "invoice_months": 1,
                "last_access": "2016-03-21T16:32:32+00:00",
                "locale": "cs-CZ",
                "postcode": "61200",
                "promotion_code": null,
                "registered_at": "2015-11-03T16:08:17+00:00",
                "street": "Palackého 123/456",
                "timezone": "Europe/Prague",
                "timezone_offset": null,
                "send_summary": false
            }

### Get User [GET /users/{id}/{?fields}]
Returns a user.

**OAuth2 Scope:** user.read

+ Parameters

    + id (string) - ID of a user.

+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "id": "6",
                "first_name": "Lorem",
                "last_name": "Ipsum",
                "name": "Lorem Ipsum",
                "email": "lorem.ipsum@example.com",
                "city": "Brno",
                "company": "Mergado",
                "country": "cz",
                "dic": "00000000",
                "ico": "00000000",
                "fakturoid_id": null,
                "invoice_months": 1,
                "last_access": "2016-03-21T16:32:32+00:00",
                "locale": "cs-CZ",
                "postcode": "61200",
                "promotion_code": null,
                "registered_at": "2015-11-03T16:08:17+00:00",
                "street": "Palackého 123/456",
                "timezone": "Europe/Prague",
                "timezone_offset": null,
                "send_summary": false
            }

### Get User Permissions [GET /users/{id}/permissions/{?limit,offset,fields}]
Lists all permissions (accesses to eshops) of a specific user.

**OAuth2 Scope:** user.shops.read

+ Parameters

    + id (string) - ID of a user.

+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "data": [
                    {
                        "role": "writer",
                        "shop_id": "1"
                    },
                    {
                        "role": "writer",
                        "shop_id": "10"
                    }
                ],
                "limit": 10,
                "offset": 0
            }

## Eshops [/users/{id}/shops/{?limit,offset,fields}]
### List User Eshops [GET]
Returns eshops the user can access.

**OAuth2 Scope:** user.shops.read

+ Parameters

    + id (string) - ID of a user.

+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "limit": 10,
                "offset": 0,
                "data": [
                    {
                        "id": "1",
                        "owner_id": "1",
                        "tariff_id": "7",
                        "name": "Example.com",
                        "web": "http://1dplakaty.cz/",
                        "xml_domain": "1dplakaty.cz",
                        "exported_items": 256,
                        "created_at": "2015-11-04T12:31:18+00:00",
                        "permissions": [
                            {
                                "role": "reader",
                                "user_id": "2"
                            }
                        ]
                    }
                ]
            }

### Get an Eshop [GET /shops/{id}/{?fields}]
Returns an eshop with the given ID.

**OAuth2 Scope:** shop.read

+ Parameters

    + id (string) - ID of a shop.

+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "id": "1",
                "owner_id": "1",
                "tariff_id": "7",
                "name": "Example.com",
                "web": "http://1dplakaty.cz/",
                "xml_domain": "1dplakaty.cz",
                "exported_items": 256,
                "created_at": "2015-11-04T12:31:18+00:00",
                "permissions": [
                    {
                        "role": "reader",
                        "user_id": "2"
                    }
                ]
            }

### Show Eshop Info [GET /shops/{id}/info/]
Show additional eshop information and statistics.

**Oauth2 Scope:** shop.read

+ Parameters

    + id (string) - ID of an eshop.

+ Response 200

    + Headers

            Content-Type: application/json
    
    + Body
    
            {
                "number_of_projects": 3
            }

## Projects [/shops/{id}/projects/{?limit,offset,fields}]
### List Shop Projects [GET]
Returns projects of an eshop.

**OAuth2 Scope:** shop.projects.read

+ Parameters

    + id (string) - ID of a shop.

+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "limit": 10,
                "offset": 0,
                "data": [
                    {
                        "id": "8",
                        "shop_id": "1",
                        "creator_id": "1",
                        "name": "Billiger.de",
                        "url": "https://dummy.mergado.com/1dplakaty.xml",
                        "activated": true,
                        "created": "2015-11-11T15:42:33+00:00",
                        "exported_items": 0,
                        "input_format": "zbozi.cz",
                        "output_format": "billiger.de",
                        "pairing_elements": "URL",
                        "readonly": false,
                        "rules_changed_at": "2015-11-11T15:43:07+00:00",
                        "sklik_context": null,
                        "sklik_search": null,
                        "slug": "1dplakaty-cz-billiger-de-3dc7b45ffb682e54d989cbfc4f9c5978",
                        "turned_off": true,
                        "update_period": 14400,
                        "last_access": "2015-12-10T12:51:59+00:00",
                        "xml_synced_at": "2015-11-18T13:19:59+00:00",
                        "xml_updated_at": "2015-11-11T15:42:50+00:00"
                    }
                ]
            }

### Get a Project [GET /projects/{id}/{?fields}]
Returns a project with the given ID.

**OAuth2 Scope:** project.read

+ Parameters

    + id (string) - ID of a project.

+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "id": "8",
                "shop_id": "1",
                "creator_id": "1",
                "name": "Billiger.de",
                "url": "https://dummy.mergado.com/1dplakaty.xml",
                "activated": true,
                "created": "2015-11-11T15:42:33+00:00",
                "exported_items": 0,
                "input_format": "zbozi.cz",
                "output_format": "billiger.de",
                "pairing_elements": "URL",
                "readonly": false,
                "rules_changed_at": "2015-11-11T15:43:07+00:00",
                "sklik_context": null,
                "sklik_search": null,
                "slug": "1dplakaty-cz-billiger-de-3dc7b45ffb682e54d989cbfc4f9c5978",
                "turned_off": true,
                "update_period": 14400,
                "last_access": "2015-12-10T12:51:59+00:00",
                "xml_synced_at": "2015-11-18T13:19:59+00:00",
                "xml_updated_at": "2015-11-11T15:42:50+00:00"
            }

### Show Project Info [GET /projects/{id}/info/]
Show additional project information and statistics.

**Oauth2 Scope:** project.read

+ Parameters

    + id (string) - ID of a project.

+ Response 200

    + Headers

            Content-Type: application/json
    
    + Body
    
            {
                "number_of_elements": 17
            }

## Products [/projects/{id}/products/{?limit,offset,fields}]
### List Products [GET]
Returns project's products.

**OAuth2 Scope:** project.products.read

+ Parameters

    + id (string) - ID of a shop.

+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "data": [
                    {
                        "id": "1693",
                        "output_changed_at": null,
                        "updated_at": "2016-04-28T17:18:50+00:00",
                        "data": {
                            "CATEGORYTEXT": "Tonery do tiskáren > Kompatibilní tonery",
                            "DELIVERY_DATE": "0",
                            "DESCRIPTION": "Toner HP Q7551X",
                            "DUES": "0",
                            "IMGURL": "http://www.example.com/img/755.jpg",
                            "MANUFACTURER": "PIRANHA",
                            "PRICE": "808.18",
                            "PRODUCT": "Toner HP Q7551X",
                            "URL": "http://www.comps.cz/toner-hp-755",
                            "VAT": "21.0"
                        },
                        "input_data": {
                            "CATEGORYTEXT": "Tonery do tiskáren | Kompatibilní tonery",
                            "DELIVERY_DATE": "0",
                            "DESCRIPTION": "Toner HP Q7551X",
                            "DUES": "3",
                            "IMGURL": "http://www.example.com/img/755.jpg",
                            "MANUFACTURER": "PIRANHA",
                            "PRICE": "808.18",
                            "PRODUCT": "Toner HP Q7551X",
                            "URL": "http://www.comps.cz/toner-hp-755",
                            "VAT": "21.0"
                        }
                    },
                    {
                        "id": "1694",
                        "output_changed_at": null,
                        "updated_at": "2016-04-28T17:18:50+00:00",
                        "data": {
                            "CATEGORYTEXT": "Tonery do tiskáren > Kompatibilní tonery",
                            "DELIVERY_DATE": "0",
                            "DESCRIPTION": "Toner HP Q7532X",
                            "DUES": "0",
                            "IMGURL": "http://www.example.com/img/7532.jpg",
                            "MANUFACTURER": "PIRANHA",
                            "PRICE": "848.18",
                            "PRODUCT": "Toner HP Q7532X",
                            "URL": "http://www.comps.cz/toner-hp-7532",
                            "VAT": "21.0"
                        },
                        "input_data": {
                            "CATEGORYTEXT": "Tonery do tiskáren | Kompatibilní tonery",
                            "DELIVERY_DATE": "0",
                            "DESCRIPTION": "Toner HP Q7532X",
                            "DUES": "0",
                            "IMGURL": "http://www.example.com/img/7532.jpg",
                            "MANUFACTURER": "PIRANHA",
                            "PRICE": "848.18",
                            "PRODUCT": "Toner HP Q7532X",
                            "URL": "http://www.comps.cz/toner-hp-7532",
                            "VAT": "21.0"
                        }
                    }
                ],
                "limit": 10,
                "offset": 0
            }

### Get a Product [GET /products/{id}/{?fields}]
Returns a product with the given ID.

**OAuth2 Scope:** project.products.read

+ Parameters

    + id (string) - ID of a product.

+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "id": "1693",
                "output_changed_at": null,
                "updated_at": "2016-04-28T17:18:50+00:00",
                "data": {
                    "CATEGORYTEXT": "Tonery do tiskáren > Kompatibilní tonery",
                    "DELIVERY_DATE": "0",
                    "DESCRIPTION": "Toner HP Q7551X",
                    "DUES": "0",
                    "IMGURL": "http://www.example.com/img/755.jpg",
                    "MANUFACTURER": "PIRANHA",
                    "PRICE": "808.18",
                    "PRODUCT": "Toner HP Q7551X",
                    "URL": "http://www.comps.cz/toner-hp-755",
                    "VAT": "21.0"
                },
                "input_data": {
                    "CATEGORYTEXT": "Tonery do tiskáren | Kompatibilní tonery",
                    "DELIVERY_DATE": "0",
                    "DESCRIPTION": "Toner HP Q7551X",
                    "DUES": "0",
                    "IMGURL": "http://www.example.com/img/755.jpg",
                    "MANUFACTURER": "PIRANHA",
                    "PRICE": "808.18",
                    "PRODUCT": "Toner HP Q7551X",
                    "URL": "http://www.comps.cz/toner-hp-755",
                    "VAT": "21.0"
                }
            }

### Query Products [GET /queries/{id}/products/{?limit,offset,fields}]
Returns products that satisfy a condition defined by the given query.

**OAuth2 Scope:** projects.products.read

+ Parameters

    + id (string) - ID of the query.
    
+ Response 200

    + Headers

            Content-Type: application/json

    + Body  
    
            {
                "data": [
                    {
                        "id": "3838",
                        "output_changed_at": "2016-04-25T17:20:44+00:00",
                        "updated_at": "2016-04-25T16:42:50+00:00",
                        "data": {
                            "CATEGORYTEXT": "Text kategorie",
                            "DELIVERY_DATE": "0",
                            "DELIVERY_PRICE_COD|DHL": "5.90",
                            "DELIVERY_PRICE_COD|SLOVENSKA_POSTA": "3.90",
                            "DELIVERY_PRICE|DHL": "4.90",
                            "DELIVERY_PRICE|SLOVENSKA_POSTA": "2.90",
                            "DESCRIPTION": "Popis produktu",
                            "GIFT": "Zľavový kupón na ďalší nákup",
                            "HEUREKA_CPC": null,
                            "IMGURL": "http://www.obrazok.sk/obrazok.jpg",
                            "ITEM_ID": "766",
                            "MANUFACTURER": "Vyrobca",
                            "PRICE_VAT": "25.39",
                            "PRODUCT": "Vyrobok",
                            "PRODUCTNAME": "Nayov vzrobku",
                            "URL": "http://www.url.cz/prevyrobok/",
                            "VAT": "0.21"
                        },
                        "input_data": {
                            "CATEGORYTEXT": "Text kategorie",
                            "DELIVERY_DATE": "0",
                            "DELIVERY_PRICE_COD|DHL": "5.90",
                            "DELIVERY_PRICE_COD|SLOVENSKA_POSTA": "3.90",
                            "DELIVERY_PRICE|DHL": "4.90",
                            "DELIVERY_PRICE|SLOVENSKA_POSTA": "2.90",
                            "DESCRIPTION": "Popis produktu",
                            "GIFT": "Zľavový kupón na ďalší nákup",
                            "HEUREKA_CPC": null,
                            "IMGURL": "http://www.obrazok.sk/obrazok.jpg",
                            "ITEM_ID": "766",
                            "MANUFACTURER": "Vyrobca",
                            "PRICE_VAT": "25.39",
                            "PRODUCT": "Vyrobok",
                            "PRODUCTNAME": "Nayov vzrobku",
                            "URL": "http://www.url.cz/prevyrobok/",
                            "VAT": "0.21"
                        }
                    },
                    {
                        "id": "3839",
                        "output_changed_at": "2016-04-25T17:20:44+00:00",
                        "updated_at": "2016-04-25T16:42:50+00:00",
                        "data": {
                            "CATEGORYTEXT": "Text kategorie",
                            "DELIVERY_DATE": "0",
                            "DELIVERY_PRICE_COD|DHL": "5.90",
                            "DELIVERY_PRICE_COD|SLOVENSKA_POSTA": "3.90",
                            "DELIVERY_PRICE|DHL": "4.90",
                            "DELIVERY_PRICE|SLOVENSKA_POSTA": "2.90",
                            "DESCRIPTION": "Popis produktu",
                            "GIFT": "Zľavový kupón na ďalší nákup",
                            "HEUREKA_CPC": null,
                            "IMGURL": "http://www.obrazok.sk/obrazok.jpg",
                            "ITEM_ID": "766",
                            "MANUFACTURER": "Vyrobca",
                            "PRICE_VAT": "25.39",
                            "PRODUCT": "Vyrobok",
                            "PRODUCTNAME": "Nayov vzrobku",
                            "URL": "http://www.url.cz/prevyrobok/",
                            "VAT": "0.21"
                        },
                        "input_data": {
                            "CATEGORYTEXT": "Text kategorie",
                            "DELIVERY_DATE": "0",
                            "DELIVERY_PRICE_COD|DHL": "5.90",
                            "DELIVERY_PRICE_COD|SLOVENSKA_POSTA": "3.90",
                            "DELIVERY_PRICE|DHL": "4.90",
                            "DELIVERY_PRICE|SLOVENSKA_POSTA": "2.90",
                            "DESCRIPTION": "Popis produktu",
                            "GIFT": "Zľavový kupón na ďalší nákup",
                            "HEUREKA_CPC": null,
                            "IMGURL": "http://www.obrazok.sk/obrazok.jpg",
                            "ITEM_ID": "766",
                            "MANUFACTURER": "Vyrobca",
                            "PRICE_VAT": "25.39",
                            "PRODUCT": "Vyrobok",
                            "PRODUCTNAME": "Nayov vzrobku",
                            "URL": "http://www.url.cz/prevyrobok/",
                            "VAT": "0.21"
                        }
                    }
                ],
                "limit": 10,
                "offset": 0
            }

## Elements [/projects/{id}/elements/]
API for project's elements management.

### Create an Element [POST]
Creates an element inside a project.

**OAuth2 Scope:** project.elements.write

+ Parameters

    + id (string) - ID of a project.

+ Request

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "name": "SHIPPING",
                "hidden": false
            }

+ Response 201

    + Headers

            Content-Type: application/json
            Location: "https://app.mergado.com/api/elements/123"

    + Body
    
            {
                "id": "123",
                "project_id": "1",
                "name": "SHIPPING",
                "type": "output",
                "hidden": false
            }

### List Project Elements [GET /projects/{id}/elements/{?limit,offset,fields}]
Lists all project's elements.

**OAuth2 Scope:** project.elements.read

+ Parameters

    + id (string) - ID of a project.

+ Response 200

    + Headers
    
            Content-Type: application/json

    + Body
    
            {
                "data": [
                    {
                        "hidden": false,
                        "id": "1",
                        "name": "PRODUCT",
                        "project_id": "33",
                        "type": "input"
                    },
                    {
                        "hidden": false,
                        "id": "2",
                        "name": "DESCRIPTION",
                        "project_id": "33",
                        "type": "input"
                    },
                    {
                        "hidden": false,
                        "id": "4",
                        "name": "URL",
                        "project_id": "33",
                        "type": "input"
                    },
                    {
                        "hidden": false,
                        "id": "5",
                        "name": "CATEGORYTEXT",
                        "project_id": "33",
                        "type": "input"
                    },
                    {
                        "hidden": false,
                        "id": "6",
                        "name": "PRICE",
                        "project_id": "33",
                        "type": "input"
                    }
                ],
                "limit": 10,
                "offset": 0
            }

### Get an Element [GET /elements/{id}/{?fields}]
Returns an element.

**OAuth2 Scope:** project.elements.read

+ Parameters

    + id (string) - ID of an element.

+ Response 200

    + Headers
    
            Content-Type: application/json

    + Body
    
            {
                "hidden": false,
                "id": "6",
                "name": "PRICE",
                "project_id": "33",
                "type": "input"
            }

### Delete an Element [DELETE /elements/{id}/{?fields}]
Delete the specified element.

**OAuth2 Scope:** project.elements.write

+ Parameters

    + id (string) - ID of an element.

+ Request

    + Headers

            Accept: application/json

+ Response 204

    + Headers

            Content-Type: application/json

### Update an Element [PATCH /elements/{id}/]
Performes update of element's attributes.

**OAuth2 Scope:** project.elements.write

+ Parameters

    + id (string) - ID of a project.

+ Request

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "hidden": true
            }

+ Response 200

    + Headers

            Content-Type: application/json
            Location: "https://app.mergado.com/api/elements/123"

    + Body
    
            {
                "id": "123",
                "project_id": "1",
                "name": "SHIPPING",
                "type": "output",
                "hidden": true
            }

## Variables [/project/{id}/variables/]
API for management of project's variables.

### Create a Variable [POST]
Creates a new variable inside a project.

**OAuth2 Scope:** project.variables.write

+ Parameters

    + id (string) - ID of a project.

+ Request

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "name": "DESCRIPTION_A",
                "project_element_id": "1",
                "regular_expression": "(\\-|\\* )?(.*)",
                "sample_text": null,
                "fragment_number": 2
            }

+ Response 201

    + Headers

            Content-Type: application/json
            Location: "https://app.mergado.com/api/variables/1521/"

    + Body
    
            {
                "id": "1521",
                "name": "DESCRIPTION_A",
                "project_element_id": "1",
                "project_id": "33",
                "regular_expression": "(\\-|\\* )?(.*)",
                "fragment_number": 2,
                "sample_text": null,
                "type": "manual"
            }

### List Project Variables [GET /projects/{id}/variables/{?limit,offset,fields}]
Lists all project's variables.

**OAuth2 Scope:** project.variables.read

+ Parameters

    + id (string) - ID of a variable.

+ Response 200

    + Headers
    
            Content-Type: application/json

    + Body
    
            {
                "data": [
                    {
                        "id": "1521",
                        "name": "DESCRIPTION_A",
                        "project_element_id": "1",
                        "project_id": "33",
                        "regular_expression": "(\\-|\\* )?(.*)",
                        "fragment_number": 2,
                        "sample_text": null,
                        "type": "manual"
                    }
                ],
                "limit": 10,
                "offset": 0
            }

### Get a Variable [GET /variables/{id}/{?fields}]
Returns a variable.

**OAuth2 Scope:** project.variables.read

+ Parameters

    + id (string) - ID of a variable.

+ Response 200

    + Headers
    
            Content-Type: application/json

    + Body
    
            {
                "id": "1521",
                "name": "DESCRIPTION_A",
                "project_element_id": "1",
                "project_id": "33",
                "regular_expression": "(\\-|\\* )?(.*)",
                "fragment_number": 2,
                "sample_text": null,
                "type": "manual"
            }

### Delete a Variable [DELETE /variables/{id}/{?fields}]
Delete the specified variable.

**OAuth2 Scope:** project.variables.write

+ Parameters

    + id (string) - ID of a variable.

+ Request

    + Headers

            Accept: application/json

+ Response 204

    + Headers

            Content-Type: application/json

### Update a Variable [PATCH /variables/{id}/]
Performes update of variable's attributes.

**OAuth2 Scope:** project.variables.write

+ Parameters

    + id (string) - ID of a variable.

+ Request

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "name": "DESCRIPTION_OMG"
            }

+ Response 200

    + Headers

            Content-Type: application/json
            Location: "https://app.mergado.com/api/variables/1521"

    + Body
    
            {
                "id": "1521",
                "name": "DESCRIPTION_OMG",
                "project_element_id": "1",
                "project_id": "33",
                "regular_expression": "(\\-|\\* )?(.*)",
                "fragment_number": 2,
                "sample_text": null,
                "type": "manual"
            }

## Notifications [/shops/{id}/notifications/]
API for notifications. Notifications in Mergado have _channels_. A channel
represents the way to notify a user. Furthermore, notifications can be created
with a different _scope_. A scope defines who will receive the notification.
Notifications can be also made with different _priority_. Users can configure
what notification and how often they want to receive each notification with
given priority.

+ Attributes

    + title (string) - Subject or title of the notification.
    + body (string) - Notification text.
    + channels (enum[string], optional) - List of channels.
        + Default
            + `frontend`
        + Members
            + `email` - Notification is sent to the user's email.
            + `frontend` - Notification is shown in the Mergado's notification panel.
    + priority (enum[string], optional) - Priority of the notification.
        + Default
            + `medium`
        + Members
            + `low`
            + `medium`
            + `high`
    + scope (enum[string], optional) - Scope of the notification.
        + Default
            + `owner`
        + Members
            + `owner` - Notification is sent to all users who can access the eshop.
            + `eshop` - Notification is sent only to the owner of the eshop.

### Send a Notification [POST]
**OAuth2 Scope:** shop.notify.write

+ Parameters

    + id (string) - ID of an eshop.

+ Request

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "title": "eshop fuckup",
                "body": "Your eshop is total screwed.",
                "channels": ["email"],
                "created_at": "2016-05-11 14:43:18",
                "priority": "high",
                "scope": "owner"
            }

+ Response 201

    + Headers

            Content-Type: application/json
            Location: "https://app.mergado.com/api/shops/1/notifications/30/"

    + Body
    
            {
                "id": "30",
                "title": "eshop fuckup",
                "body": "Your eshop is total screwed.",
                "channels": ["email"],
                "created_at": "2016-05-11 14:43:18",
                "priority": "high",
                "scope": "owner"
            }

### Get a Notification [GET /notifications/{id}/{?fields}]
**OAuth2 Scope:** shop.notify.read

+ Parameters

    + id (string) - ID of a notification.

+ Response 201

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "id": "30",
                "title": "eshop fuckup",
                "body": "Your eshop is total screwed.",
                "channels": ["email"],
                "created_at": "2016-05-11 14:43:18",
                "priority": "high",
                "scope": "owner"
            }
            
## Tasks [/project/{id}/tasks/{?limit,offset,fields}]
### Create a Task [POST]
Creates a tasks and runs it. Returns information about created task.

**OAuth2 Scope:** project.tasks.write

+ Parameters

    + id (string) - ID of a project.
    
+ Request

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "actions": ["download","sync","apply"],
                "force": true
            }
    
+ Response 201

    + Headers

            Content-Type: application/json
            Location: "https://app.mergado.com/api/tasks/15/"

    + Body
    
            {
              "actions": [
                "download",
                "sync",
                "apply"
              ],
              "current_action": null,
              "duration": 0,
              "error": null,
              "finished_at": null,
              "id": "224",
              "project_id": "30",
              "started_at": "2016-05-23T11:49:47+00:00",
              "status": "in_progress"
            }
            
### Get a Task [GET /tasks/{id}/{?fields}]
Fetch a specific task.

**OAuth2 Scope:** project.tasks.read

+ Parameters

    + id (string) - ID of a task.

+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
              "actions": [
                "download",
                "sync",
                "apply"
              ],
              "current_action": null,
              "duration": 3.309,
              "error": null,
              "finished_at": "2016-05-20T14:42:59+00:00",
              "id": "223",
              "project_id": "30",
              "started_at": "2016-05-20T14:42:56+00:00",
              "status": "done"
            }
            
                        
# Group Rules
API for rule management, definition and application.

## Definitions [/rules/definitions/{?limit,offset,fields}]
### List Defined Rules [GET]
Returns definitions of all rules and required data for their instantiation.

+ Response 200

    + Headers
    
            Content-Type: application/json

    + Body
    
            {
                "data": [
                    {
                        "type": "format_converter",
                        "relationship": "1:1",
                        "fields": []
                    },
                    {
                        "type": "rewriting",
                        "relationship": "1:1",
                        "fields": [
                            {
                                "name": "new_content",
                                "required": true,
                                "type": "STRING"
                            }
                        ]
                    },
                    {
                        "type": "replacing",
                        "relationship": "1:1",
                        "fields": [
                            {
                                "name": "search",
                                "required": true,
                                "type": "STRING"
                            },
                            {
                                "name": "replacement",
                                "required": true,
                                "type": "STRING"
                            },
                            {
                                "name": "regex",
                                "required": true,
                                "type": "BOOLEAN"
                            },
                            {
                                "name": "case_sensitive",
                                "required": true,
                                "type": "BOOLEAN"
                            }
                        ]
                    }
                ],
                "limit": 10,
                "offset": 0
            }

## Rule Instances [/projects/{id}/rules/]
### Create a Rule [POST]
Creates a new rule inside the specified project.

**OAuth2 Scope:** project.rules.write

+ Parameters

    + id (string) - ID of a project.

+ Request

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "name": "Cena",
                "type": "rewriting",
                "project_element_id": "5",
                "applies": true,
                "priority": 3,
                "is_deletable": true,
                "is_movable": true,
                "is_editable": true,
                "is_pausable": true,
                "data": {
                    "new_content": "%CATEGORYTEXT%"
                },
                "queries": [
                    {
                        "id": "2"
                    }
                ]
            }

+ Response 201

    + Headers

            Content-Type: application/json
            Location: "https://app.mergado.com/api/rules/15/"

    + Body
    
            {
                "id": "15",
                "name": "Cena",
                "type": "rewriting",
                "project_id": "1",
                "project_element_id": "5",
                "applies": true,
                "is_deletable": true,
                "is_movable": true,
                "is_editable": true,
                "is_pausable": true,
                "priority": 3,
                "data": {
                    "new_content": "%CATEGORYTEXT%"
                },
                "queries": [
                    {
                        "advanced_interface": false,
                        "created_at": "2016-03-22T09:05:14+00:00",
                        "id": "2",
                        "name": null,
                        "project_id": "33",
                        "query": "PRICE > 20",
                        "read_only": false,
                        "search_output": false
                    }
                ]
            }

+ Request

    + Headers
    
            Content-Type: application/json
    
    + Body
    
            {
                "name": "Cena 2 BATCH",
                "project_element_id": "5",
                "applies": true,
                "deletable": true,
                "priority": 3,
                "type": "batch_rewriting",
                "data": [
                    {
                        "position": 1,
                        "query_id": "4",
                        "value": "2.00"
                    },
                    {
                        "position": 2,
                        "query_id": "3",
                        "value": "1.00"
                    }
                ]
            }

+ Response 201

    + Headers

            Content-Type: application/json
            Location: "https://app.mergado.com/api/rules/16/"

    + Body
    
            {
                "applies": true,
                "deletable": true,
                "id": "39",
                "name": "Cena 2 BATCH",
                "priority": 3,
                "project_element_id": "5",
                "project_id": "33",
                "type": "batch_rewriting",
                "data": [
                    {
                        "position": 1,
                        "query_id": "4",
                        "value": "2.00"
                    },
                    {
                        "position": 2,
                        "query_id": "3",
                        "value": "1.00"
                    }
                ],
                "queries": [
                    {
                        "id": "1",
                        "advanced_interface": false,
                        "created_at": "2016-03-22T09:02:42+00:00",
                        "name": "♥ALLPRODUCTS♥",
                        "project_id": "33",
                        "query": "",
                        "read_only": true,
                        "search_output": false
                    }
                ]
            }

### List Project Rules [GET /projects/{id}/rules/{?limit,offset,fields}]
Lists all rules' instances that were created inside the specified project.

**OAuth2 Scope:** project.rules.read

+ Parameters

    + id (string) - ID of a project.

+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "data": [
                    {
                        "id": "1",
                        "project_id": "1",
                        "project_element_id": null,
                        "applies": true,
                        "deletable": true,
                        "name": null,
                        "priority": 0,
                        "type": "format_converter"
                    },
                    {
                        "id": "15",
                        "project_id": "1",
                        "project_element_id": "5",
                        "applies": true,
                        "deletable": true,
                        "name": "Cena",
                        "priority": 3,
                        "type": "batch_rewriting"
                    }
                ],
                "limit": 10,
                "offset": 0
            }

### Get a Rule [GET /rules/{id}/{?fields}]
Returns a specific rule instance.

**OAuth2 Scope:** project.rules.read

+ Parameters

    + id (string) - ID of a rule.

+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "id": "15",
                "project_id": "1",
                "project_element_id": "5",
                "applies": true,
                "deletable": true,
                "name": "Cena",
                "priority": 3,
                "type": "rewriting",
                "data": {
                    "new_content": "%CATEGORYTEXT%"
                }
            }

### Delete a Rule [DELETE /rules/{id}/{?fields}]
Delete the specified rule.

**OAuth2 Scope:** project.rules.write

+ Parameters

    + id (string) - ID of a rule.

+ Request

    + Headers

            Accept: application/json

+ Response 204

    + Headers

            Content-Type: application/json

### Update a Rule [PATCH /rules/{id}/]
Performes update of rule's attributes.

**OAuth2 Scope:** project.rules.write

+ Parameters

    + id (string) - ID of a project.

+ Request

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "name": "PRODUCTNAME: Added Free Car",
                "data": {
                    "new_content": "%PRODUCTNAME% + Car"
                }
            }

+ Response 200

    + Headers

            Content-Type: application/json
            Location: "https://app.mergado.com/api/rules/112"

    + Body
    
            {
                "id": "112",
                "project_id": "2",
                "project_element_id": "50",
                "applies": true,
                "deletable": true,
                "name": "PRODUCTNAME: Added Free Car",
                "priority": 3,
                "type": "rewriting",
                "data": {
                    "new_content": "%CATEGORYTEXT% + Car"
                }
            }

### Get Rule Data [GET /rules/{id}/data/{?limit,offset,fields}]
Returns only the data of a specific rule instance. This can be helpful
for one to many (O2M) rules with a lot of records.

**OAuth2 Scope:** project.rules.read

+ Parameters

    + id (string) - ID of a rule.

+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "data": [
                    {
                        "position": 1,
                        "query_id": "28",
                        "value": "2.00"
                    },
                    {
                        "position": 2,
                        "query_id": "30",
                        "value": "1.00"
                    }
                ],
                "type": "batch_rewriting",
                "rule_id": "15"
            }

## Queries [/projects/{id}/queries/]
MQL query management.

### Create a Query [POST]
Creates a new query inside the specified project.

**OAuth2 Scope:** project.queries.write

+ Parameters

    + id (string) - ID of a project.

+ Request

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "name": "PRICE less then 200 Kč",
                "query": "PRICE < 200",
                "read_only": false,
                "search_output": true
            }

+ Response 201

    + Headers

            Content-Type: application/json
            Location: "https://app.mergado.com/api/queries/d3o9v/"

    + Body
    
            {
                "id": "d3o9v",
                "name": "PRICE less then 200 Kč",
                "project_id": "21",
                "advanced_interface": false,
                "created_at": "2016-03-22T09:02:42+00:00",
                "query": "PRICE < 200",
                "read_only": false,
                "search_output": false
            }

### Get a Query [GET /queries/{id}/{?fields}]
Returns the requrested query.

**OAuth2 Scope:** project.queries.read

+ Parameters

    + id (string) - ID of a query.

+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "id": "2",
                "name": null,
                "project_id": "33",
                "advanced_interface": false,
                "created_at": "2016-03-22T09:05:14+00:00",
                "query": "CATEGORYTEXT = \"Spotřební materiál | Ostatní spotřební materiál | Pásky a filmy\"",
                "read_only": false,
                "search_output": false
            }

### Delete a Query [DELETE /queries/{id}/]
Deletes a specific query.

**OAuth2 Scope:** project.queries.write

+ Parameters

    + id (string) - ID of a query.

+ Request

    + Headers

            Accept: application/json

+ Response 204

    + Headers

            Content-Type: application/json

### Update a Query [PATCH /queries/{id}/]
Performes update of the specified query.

**OAuth2 Scope:** project.queries.read

+ Parameters

    + id (string) - ID of a project.

+ Request

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "query": "PRICE > 200"
            }

+ Response 200

    + Headers

            Content-Type: application/json
            Location: "https://app.mergado.com/api/queries/d3o9v/"

    + Body
    
            {
                "id": "d3o9v",
                "name": "PRICE more then 200 Kč",
                "project_id": "21",
                "advanced_interface": false,
                "created_at": "2016-03-22T09:02:42+00:00",
                "query": "PRICE > 200",
                "read_only": false,
                "search_output": false
            }

### List Project Queries [GET /projects/{id}/queries/{?limit,offset,fields}]
Lists all queries that were created inside the specified project.

**OAuth2 Scope:** project.queries.read

+ Parameters

    + id (string) - ID of a project.

+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "data": [
                    {
                        "id": "2",
                        "name": null,
                        "project_id": "33",
                        "advanced_interface": false,
                        "created_at": "2016-03-22T09:05:14+00:00",
                        "query": "CATEGORYTEXT = \"Spotřební materiál | Pásky a filmy\"",
                        "read_only": false,
                        "search_output": false
                    },
                    {
                        "id": "1",
                        "name": "ALLPRODUCTS",
                        "project_id": "33",
                        "advanced_interface": false,
                        "created_at": "2016-03-22T09:02:42+00:00",
                        "query": "",
                        "read_only": true,
                        "search_output": false
                    }
                ],
                "limit": 10,
                "offset": 0
            }

### List Rule Queries [GET /rules/{id}/queries/{?limit,offset,fields}]
Lists all queries that were created for the specified rule.

**OAuth2 Scope:** project.queries.read

+ Parameters

    + id (string) - ID of a rule.

+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "data": [
                    {
                        "id": "2",
                        "name": null,
                        "project_id": "33",
                        "advanced_interface": false,
                        "created_at": "2016-03-22T09:05:14+00:00",
                        "query": "CATEGORYTEXT = \"Spotřební materiál | Pásky a filmy\"",
                        "read_only": false,
                        "search_output": false
                    },
                    {
                        "id": "1",
                        "name": "ALLPRODUCTS",
                        "project_id": "33",
                        "advanced_interface": false,
                        "created_at": "2016-03-22T09:02:42+00:00",
                        "query": "",
                        "read_only": true,
                        "search_output": false
                    }
                ],
                "limit": 10,
                "offset": 0
            }

### Assign a Query to a Rule [PATCH /rules/{id}/queries/]
Assigns a Query to a Rule. The query must exist, otherwise 400 (bad request) status is returned.
The body parameters also must uniquely identify a query. If the query is already assigned to the rule,
409 (conflict) status is returned.

**OAuth2 Scope:** project.rules.write

+ Parameters

    + id (string) - ID of a rule.

+ Request

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "id": "d3o9v"
            }

+ Response 200

    + Headers

            Content-Type: application/json
            Location: "https://app.mergado.com/api/rules/d3o9v/queries/"

    + Body
    
            {
                "data": [
                    {
                        "id": "d3o9v",
                        "name": "PRICE more then 200 Kč",
                        "project_id": "21",
                        "advanced_interface": false,
                        "created_at": "2016-03-22T09:02:42+00:00",
                        "query": "PRICE > 200",
                        "read_only": false,
                        "search_output": false
                    }
                ],
                "limit": 10,
                "offset": 0
            }

+ Request

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "name": "PRICE more then 200 Kč",
                "query": "PRICE > 200"
            }

+ Response 200

    + Headers

            Content-Type: application/json
            Location: "https://app.mergado.com/api/rules/d3o9v/queries/"

    + Body
    
            {
                "data": [
                    {
                        "id": "2",
                        "name": "PRICE more then 200 Kč",
                        "project_id": "33",
                        "advanced_interface": false,
                        "created_at": "2016-03-22T09:05:14+00:00",
                        "query": "PRICE > 200",
                        "read_only": false,
                        "search_output": false
                    }
                ],
                "limit": 10,
                "offset": 0
            }

### Retract a Query from a Rule [DELETE /rules/{rid}/queries/{qid}]
Retract a Query from a Rule.

**OAuth2 Scope:** project.rules.write

+ Parameters

    + rid (string) - ID of a rule.
    + qid (string) - ID of a query.

+ Request

    + Headers

            Content-Type: application/json

+ Response 204

# Group Statistics
API for statistics, their acquisition and aggregation.

**Warning:** Statistics are currently collected only for the following
export (project) formats:

* `heureka.cz`, `heureka.sk` - all listed endpoints are supported.
* `zbozi.cz` - only eshop's statistics can be requested.

## Eshops [/shops/{id}/stats/{?limit,offset,fields}]

### Eshop Statistics [GET]
Returns latest summarized statistics and other information of en eshop.

**OAuth2 Scope:** project.stats.read

+ Parameters

    + id (string) - ID of the eshop.

+ Response 200

    + Headers
    
            Content-Type: application/json

    + Body
    
            {
                "data": [
                    {
                        "date": "2016-04-23",
                        "heureka_contact_email": "example@example.com",
                        "heureka_contact_phone": "123 456 789",
                        "heureka_credit_amount": 3904.82,
                        "heureka_credit_status": "ok",
                        "heureka_follows_questions": true,
                        "heureka_has_active_ppc": true,
                        "heureka_has_certificate": true,
                        "heureka_logo_url": "http://example.com/img/logo.png",
                        "heureka_subsidiaries_count": 101,
                        "heureka_total_clicks": 937,
                        "heureka_total_cost": 1788.12,
                        "heureka_xml_available": true,
                        "hledejceny_credit_amount": 1223.59,
                        "hledejceny_total_clicks": 12,
                        "hledejceny_total_cost": 98,
                        "srovname_credit_amount": 939,
                        "srovname_total_clicks": 19,
                        "srovname_total_cost": 54,
                        "zbozi_credit_amount": 1943,
                        "zbozi_total_clicks": 203,
                        "zbozi_total_cost": 1234
                    }
                ],
                "limit": 10,
                "offset": 0
            }

## Products [/products/{id}/stats/]

### Statistics of a Product [GET /products/<id>/stats/{?fields,date}]
Retruns statistics of a product, by default only the latest statistics (usualy from yesterday)
are returned. This can be changed by the query string parameter `date`.

**OAuth2 Scope:** project.stats.read

+ Parameters

    + id (string) - ID of the product.
    + date (date, optional) - Date of the collection of the statistics.

+ Response 200

    + Headers
    
            Content-Type: application/json

    + Body
    
            {
                "product_id": "4191",
                "date": "2015-01-01",
                "stats": {
                    "categorytext": "Elektronika | Počítače a kancelář",
                    "cost": 88.9,
                    "delivery_date": 0,
                    "heureka_avg_position": 1,
                    "heureka_category": "Barvící pásky",
                    "heureka_cpc": 1.55,
                    "heureka_cpc_status": "ok",
                    "heureka_is_alone": false,
                    "heureka_is_paired": true,
                    "heureka_margin_status": "ok",
                    "heureka_max_prices": [280.7, 128, null, null, null, null, null, null, null, null],
                    "heureka_min_cpc": 1,
                    "heureka_min_price": 128,
                    "heureka_min_prices": [128, 280.7, null, null, null, null, null, null, null, null],
                    "heureka_name": "Kazeta s černou páskou",
                    "heureka_popularity": 4,
                    "heureka_position_status": "ok",
                    "heureka_price_position": 2,
                    "heureka_price_status": "ok",
                    "heureka_profit": 0,
                    "heureka_segment": null,
                    "heureka_shops_count": 2,
                    "heureka_stats_clicks": 0,
                    "heureka_stats_cost_of_sales": 0,
                    "heureka_stats_cpc": 0,
                    "heureka_stats_sales": 0,
                    "heureka_stats_total_cost": 0,
                    "heureka_stats_total_orders": 0,
                    "heureka_url": "http://barvici-pasky.heureka.cz/kazeta-s-cernou-paskou/",
                    "imgurl": "https://www.example.com/img/992.jpg",
                    "is_starter": null,
                    "is_topseller": null,
                    "item_id": "992",
                    "manufacturer": "Biostar",
                    "name": "Kazeta s černou páskou",
                    "price": 232,
                    "price_vat": 280.7,
                    "url": "https://www.example.comkazeta-s-cernou-paskou"
                }
            }
 
 
### Statistics of All Products [GET /projects/{id}/stats/products/{?fields,limit,offset,date}]
Returns statistics of all products, by default only the latest statistics (usualy from yesterday)
are returned. This can be changed by the query string parameter `date`

**OAuth2 Scope:** project.stats.read

+ Parameters

    + id (string) - ID of the project.
    + date (date, optional) - Date of the collection of the requested statistics.

+ Response 200

    + Headers
    
            Content-Type: application/json

    + Body
    
            {
                "data": [
                {
                    "product_id": "123678",
                    "date": "2015-02-02",
                    "stats": {
                        "categorytext": "Náhradní díly | LCD Display pro notebook",
                        "cost": 1070.4,
                        "delivery_date": 0,
                        "heureka_avg_position": 1,
                        "heureka_cpc": 2.05,
                        "heureka_min_cpc": 1.5,
                        "heureka_min_price": 2621,
                        "heureka_name": "10.1 LCD LED Display univerzální notebook",
                        "heureka_price_position": 1,
                        "heureka_stats_clicks": 0,
                        "heureka_stats_cost_of_sales": 0,
                        "heureka_stats_cpc": 0,
                        "heureka_stats_sales": 0,
                        "heureka_stats_total_cost": 0,
                        "heureka_stats_total_orders": 0,
                        "heureka_url": "http://displeje-pro-notebooky.heureka.cz/10_1-lcd-led-display-univerzalni-notebook/",
                        "imgurl": "https://www.example.com/img/990.jpg",
                        "is_starter": null,
                        "is_topseller": null,
                        "item_id": "990",
                        "manufacturer": "Samsung / Samsung LTN",
                        "name": "10.1 LCD LED Display univerzální notebook",
                        "price": 2166,
                        "price_vat": 2620.9,
                        "url": "https://www.example.com/101quot-lcd-led-display-univerzalni-notebook"
                    }
                },
                {
                    "product_id": null,
                    "date": "2015-02-02",
                    "stats": {
                        "categorytext": "Komponenty | Chlazení | Vodní | Vodní bloky | Procesory",
                        "cost": 1500.7,
                        "delivery_date": 0,
                        "heureka_cpc": null,
                        "imgurl": "https://www.example.com/img/924.jpg",
                        "is_starter": null,
                        "is_topseller": null,
                        "item_id": "924",
                        "manufacturer": "Aqua Computer",
                        "name": "Aqua Computer Cuplex Kryos XT",
                        "price": 1651,
                        "price_vat": 1997.7,
                        "url": "https://www.example.com/aqua-computer-cuplex-kryos-xt"
                    }
                }
                ],
                "limit": 10,
                "offset": 0
            }

## Categories [/projects/{id}/stats/categories/]

### Statistics of Categories [GET /projects/<id>/stats/categories/{?fields,limit,offset}]
Returns latest statistics of feed's categories (for example number of paired products
for given `CATEGORYTEXT`).

**OAuth2 Scope:** project.stats.read

+ Parameters

    + id (string) - ID of the project.

+ Response 200

    + Headers
    
            Content-Type: application/json

    + Body
    
            {
                "data": [
                    {
                        "categorytext": "Elektronika | Foto | Foto doplňky a příslušenství | Fotopapíry",
                        "date": "2016-04-19",
                        "paired_products": 5,
                        "unpaired_products": 0
                    },
                    {
                        "categorytext": "Elektronika | Foto | Dalekohledy",
                        "date": "2016-04-19",
                        "paired_products": 20,
                        "unpaired_products": 10
                    }
                ],
                "limit": 10,
                "offset": 0
            }

## Audits [/projects/{id}/stats/audits/]

### List of Audits [GET /projects/{id}/stats/audits/{?fields,limit,offset}]
Returns list of performed audits.

**OAuth2 Scope:** project.stats.read

+ Parameters

    + id (string) - ID of the project.

+ Response 200

    + Headers
    
            Content-Type: application/json

    + Body
    
            {
                "data": [
                    {
                        "date": "2016-05-03",
                        "error": null,
                        "finished_at": null,
                        "id": "163-160503",
                        "started_at": "2016-05-04 04:50:06+0000",
                        "status": "in_progress"
                    },
                    {
                        "date": "2016-05-02",
                        "error": "required_stats_unavailable",
                        "finished_at": "2016-05-03 20:57:09+0000",
                        "id": "163-160502",
                        "started_at": "2016-05-03 04:50:06+0000",
                        "status": "error"
                    }
                ],
                "limit": 10,
                "offset": 0
            }

### Get an Audit [GET /stats/audits/{id}/{?fields}]
Returns a performed audit.

**OAuth2 Scope:** project.stats.read

+ Parameters

    + id (string) - ID of the audit.

+ Response 200

    + Headers
    
            Content-Type: application/json

    + Body
    
            {
                "id": "163-160419",
                "date": "2016-04-19",
                "error": null,
                "status": "done",
                "finished_at": "2016-04-20 12:22:49+0000",
                "product_count": 24989,
                "started_at": "2016-04-20 11:56:50+0000",
                "issues": {
                    "heureka_category_name": {
                        "ok": {
                            "count": 144,
                            "items": 383
                        },
                        "wrong": {
                            "count": 239,
                            "items": 383
                        }
                    },
                    "heureka_cpc_status": {
                        "decreased": {
                            "count": 238,
                            "items": 24989
                        },
                        "low": {
                            "count": 147,
                            "items": 24989
                        },
                        "ok": {
                            "count": 24604,
                            "items": 24989
                        }
                    },
                    "heureka_is_paired": {
                        "ok": {
                            "count": 20758,
                            "items": 24989
                        },
                        "wrong": {
                            "count": 4231,
                            "items": 24989
                        }
                    },
                    "heureka_margin_status": {
                        "ok": {
                            "count": 24989,
                            "items": 24989
                        }
                    },
                    "heureka_not_alone": {
                        "alone": {
                            "count": 13411,
                            "items": 24989
                        },
                        "ok": {
                            "count": 11578,
                            "items": 24989
                        }
                    }
                }
            }

### List Issues [GET /stats/audits/{id}/issues/{?fields,limit,offset,filter_by,order_by}]
Returns list of issues of an audit.

**OAuth2 Scope:** project.stats.read

+ Parameters

    + id (string) - ID of the audit.
    + filter_by (string, optional) - Filters to apply to the response.
    + order_by (string, optional) - Sorting to apply to the response.

+ Response 200

    + Headers
    
            Content-Type: application/json

    + Body
    
            {
                "data": [
                    {
                        "audit_id": "163-160419",
                        "item_id": "1835",
                        "product_id": null,
                        "validator": "heureka_is_paired",
                        "verdict": "wrong",
                        "info": {
                            "price_vat": 199
                        }
                    }
                ],
                "limit": 10,
                "offset": 0
            }

# Group Google
API for google.

## Analytics [/projects/{id}/google/analytics/]

### Request Data [GET /projects/{id}/google/analytics/{?fields,limit,offset,start_date,end_date,metrics,dimensions}]
Returns evaluetad metrics for each *group* (default is `date`, see bellow) ordered by the *group*'s
value in ascending order. Groups of results can be created using `dimensions` query string.

**OAuth2 Scope:** projects.ga.read

+ Parameters

    + id (string) - ID of the shop.
    + metrics (enum[string], optional) - Comma sepparated list of metrics to use.
        + Members
            + `sales_sum` - total sales of all products in the group.
            + `orders_sum` - number of orders of all products in the group.
            + `clicks_sum` - number of clicks of all products in the group.
    + dimensions (enum[string], optional) - Comma sepparated list of dimensions to use.
        + Default: `date`
        + Members
            + `date` - groups each product by the date the product has been collected.
            + `day_of_week` - groups the products by the day of the week.

+ Response 200

    + Headers

            Content-Type: application/json
    
    + Body
    
            {
                "data": [
                    {
                        "group": {"date": "2016-05-04"},
                        "clicks_sum": 861,
                        "orders_sum": 50,
                        "sales_sum": 129852
                    },
                    {
                        "group": {"date": "2016-05-03"},
                        "clicks_sum": 1661,
                        "orders_sum": 69,
                        "sales_sum": 225298
                    },
                    {
                        "group": {"date": "2016-05-02"},
                        "clicks_sum": 1523,
                        "orders_sum": 70,
                        "sales_sum": 141676
                    },
                    {
                        "group": {"date": "2016-05-01"},
                        "clicks_sum": 1095,
                        "orders_sum": 54,
                        "sales_sum": 113470
                    }
                ],
                "limit": 10,
                "offset": 0
            }

# Group Feed Audits
Audit of product feed.

- Issues are checks with non-ok verdicts. Some issues are feed-wide, so
  they are bound only to an audit resource. Most issues are product-specific,
  so they are bound to audit and also to product resource.
- Every validator provides specific additional info to check. It is accessible
  in `info` field of issues and it can have various forms - its schema is
  validator-dependent.
- Web hook URL is requested with POST (audit's JSON resource sent in data)
  right in the moment when audit is finished.
- Progress is raised by every check, there is no information about *total*
  number of progress units.
- Feed type is optional. In case it's missing, it is detected before audit
  starts.
- Error field of audits and issues has nothing to do with checking itself -
  is is used only in case mergado3 application fails and raises an exception.
  This generic error field is rather for debugging API than for being consumed
  by API clients.
- Product's data is parsed and saved just *as is* into data field. No semantic
  analysis is performed, validators take it raw and do whatever they want
  with it. This means the data field also has no fixed schema.
- Audits can be scheduled.

## Audits [/projects/{id}/feedaudits/]
### Create a New Audit [POST]
Creates and starts an audit. Feed type, web hook and shop id are optional.

**OAuth2 Scope:** projects.feedaudit.write

+ Parameters

    + id (string) - ID of the project.
    
+ Request

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "parser_type": "heureka.cz",
                "feed_types": ["heureka.cz"],
                "feed_url": "https://www.example.com/feed.xml",
                "webhook_url": "http://www.example.com/ping.php"
            }

+ Response 201

    + Headers

            Content-Type: application/json
            Location: "https://app.mergado.com/api/projects/57334061ba4989170e78dbf3/feedaudits/"

    + Body
    
            {
                "id": "51768ba7ed14f444772d6137",
                "error": null,
                "status": "in_progress",
                "feed_url": "https://www.example.com/feed.xml",
                "webhook_url": "http://www.example.com/ping.php",
                "parser_type": "heureka.cz",
                "feed_types": ["heureka.cz"],
                "encoding": "utf-8",
                "time": 254,
                "expired_at": null,
                "product_count": 8367,
                "progress": 512,
                "started_at": "2013-04-23 13:24:55+0000",
                "finished_at": null
            }

### List Audits [GET /projects/{id}/feedaudits/{?limit,offset,fields}]
Returns list of all audits.

+ Parameters

    + id (string) - ID of the project.

+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "data": [
                    {
                        "id": "51768ba7ed14f444772d6137",
                        "error": null,
                        "status": "in_progress",
                        "feed_url": "https://www.example.com/feed.xml",
                        "webhook_url": "http://www.example.com/ping.php",
                        "parser_type": "heureka.cz",
                        "feed_types": ["heureka.cz", "zbozi.cz"],
                        "encoding": "utf-8",
                        "time": 254,
                        "product_count": 8367,
                        "progress": 512,
                        "started_at": "2013-04-23 13:24:55+0000",
                        "finished_at": null
                    }
                ],
                "limit": 10,
                "offset": 0
            }

### Get an Audit [GET /feedaudits/{id}/{?fields]
Returns the requested audit resource.

**OAuth2 Scope:** projects.feedaudit.read

+ Parameters

    + id (string) - ID of the audit.

+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "id": "51768ba7ed14f444772d6137",
                "error": null,
                "status": "in_progress",
                "feed_url": "https://www.example.com/feed.xml",
                "webhook_url": "http://www.example.com/ping.php",
                "parser_type": "heureka.cz",
                "feed_types": ["heureka.cz", "zbozi.cz"],
                "encoding": "utf-8",
                "time": 254,
                "product_count": 8367,
                "progress": 512,
                "started_at": "2013-04-23 13:24:55+0000",
                "finished_at": null
            }

## Issues [/feedaudits/{id}/issues/{?limit,offset,fields,filter_by,order_by}]
### List Audit Issues [GET]
Returns all issues (problematic validations) of a specific audit.

**OAuth2 Scope:** projects.feedaudit.read

+ Parameters

    + id (string) - ID of the audit.

+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "data": [
                    {
                        "id": "51768ba7ed14f444772d6138",
                        "product_id": "57330212ba49891750549828",
                        "audit_id": "51768ba7ed14f444772d6137",
                        "checked_at": "2013-04-23 13:24:55+0000",
                        "verdict": "error",
                        "info": {
                            "element": "PRODUCT"
                        },
                        "validator": "is_present_product",
                        "level": "recommendation",
                        "feed_types": ["heureka", "zbozi"]
                    }
                ],
                "limit": 10,
                "offset": 0
            }

### Get an Issue [GET /feedaudits/issues/{id}/{?fields}]
Returns single issue with given `id`.

**OAuth2 Scope:** projects.feedaudit.read

+ Parameters

    + id (string) - ID of the issue.

+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "id": "51768ba7ed14f444772d6138",
                "checked_at": "2013-04-23 13:24:55+0000",
                "verdict": "error",
                "info": {
                    "element": "PRODUCT"
                },
                "validator": "is_present_product",
                "level": "recommendation",
                "feed_types": ["heureka", "zbozi"],
                "product_id": "51768ba7ed14f444772d6120",
                "audit_id": "51768ba7ed14f444772d6137"
            }

### List Product's Issues [GET /feedaudit/products/{id}/issues/{?limit,offset,fields,filter_by,order_by}]
Returns all issues (problematic validations) of a specific product.

**OAuth2 Scope:** projects.feedaudit.read

+ Parameters

    + id (string) - ID of the product.

+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "data": [
                    {
                        "id": "51768ba7ed14f444772d6138",
                        "product_id": "51768ba7ed14f444772d6120",
                        "audit_id": "51768ba7ed14f444772d6137",
                        "checked_at": "2013-04-23 13:24:55+0000",
                        "verdict": "error",
                        "info": {
                            "element": "PRODUCT"
                        },
                        "validator": "is_present_product",
                        "feed_types": ["heureka", "zbozi"]
                    }
                ],
                "limit": 10,
                "offset": 0
            }

## Products [/feedaudit/audits/{id}/products/{?limit,offset,fields,filter_by,order_by}]
### List Audit Products [GET]
Returns all products of a specific audit.

**OAuth2 Scope:** projects.feedaudit.read

+ Parameters

    + id (string) - ID of the audit.

+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "data": [
                    {
                        "id": "51768ba7ed14f444772d6120",
                        "audit_id": "51768ba7ed14f444772d6137",
                        "elements": [
                            {"tag": "PRODUCT", "value": "Hovězí plíce 100 g", "elements": []},
                            {"tag": "DESCRIPTION", "value": "<P>Čistě dietní krm...</div>", "elements": []},
                            {"tag": "DELIVERY_DATE", "value": 1, "elements": []},
                            {"tag": "PRICE_VAT", "value": 240.5, "elements": []}
                        ]
                    }
                ],
                "limit": 10,
                "offset": 0
            }

### Get a Product [GET /feedaudit/products/{id}{?fields}]
Returns a single product resource.

**OAuth2 Scope:** projects.feedaudit.read

+ Parameters

    + id (string) - ID of the product.

+ Response 200

    + Headers

            Content-Type: application/json

    + Body
    
            {
                "id": "51768ba7ed14f444772d6120",
                "audit_id": "51768ba7ed14f444772d6137",
                "elements": [
                    {"tag": "PRODUCT", "value": "Hovězí plíce 100 g", "elements": []},
                    {"tag": "DESCRIPTION", "value": "<P>Čistě dietní krm...</div>", "elements": []},
                    {"tag": "DELIVERY_DATE", "value": 1, "elements": []},
                    {"tag": "PRICE_VAT", "value": 240.5, "elements": []}
                ]
            }